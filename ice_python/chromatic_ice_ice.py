# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `chromatic_ice.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module chromatic
_M_chromatic = Ice.openModule('chromatic')
__name__ = 'chromatic'

if not _M_chromatic.__dict__.has_key('printer'):
    _M_chromatic.printer = Ice.createTempClass()
    class printer(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_chromatic.printer:
                raise RuntimeError('chromatic.printer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::chromatic::printer')

        def ice_id(self, current=None):
            return '::chromatic::printer'

        def ice_staticId():
            return '::chromatic::printer'
        ice_staticId = staticmethod(ice_staticId)

        def printString(self, s, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_chromatic._t_printer)

        __repr__ = __str__

    _M_chromatic.printerPrx = Ice.createTempClass()
    class printerPrx(Ice.ObjectPrx):

        def printString(self, s, _ctx=None):
            return _M_chromatic.printer._op_printString.invoke(self, ((s, ), _ctx))

        def begin_printString(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_chromatic.printer._op_printString.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_printString(self, _r):
            return _M_chromatic.printer._op_printString.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_chromatic.printerPrx.ice_checkedCast(proxy, '::chromatic::printer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_chromatic.printerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_chromatic._t_printerPrx = IcePy.defineProxy('::chromatic::printer', printerPrx)

    _M_chromatic._t_printer = IcePy.defineClass('::chromatic::printer', printer, (), True, None, (), ())
    printer._ice_type = _M_chromatic._t_printer

    printer._op_printString = IcePy.Operation('printString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())

    _M_chromatic.printer = printer
    del printer

    _M_chromatic.printerPrx = printerPrx
    del printerPrx

# End of module chromatic
